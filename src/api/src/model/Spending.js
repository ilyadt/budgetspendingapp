/**
 * Budget API
 * api для записей трат по бюджетам
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ilya_dt@proton.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The Spending model module.
 * @module model/Spending
 * @version 1.0.0
 */
class Spending {
    /**
     * Constructs a new <code>Spending</code>.
     * @alias module:model/Spending
     * @param id {String} 
     * @param date {Date} 
     * @param sort {Number} 
     * @param money {module:model/Money} 
     * @param description {String} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     */
    constructor(id, date, sort, money, description, createdAt, updatedAt) { 
        
        Spending.initialize(this, id, date, sort, money, description, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, date, sort, money, description, createdAt, updatedAt) { 
        obj['id'] = id;
        obj['date'] = date;
        obj['sort'] = sort;
        obj['money'] = money;
        obj['description'] = description;
        obj['createdAt'] = createdAt;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>Spending</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Spending} obj Optional instance to populate.
     * @return {module:model/Spending} The populated <code>Spending</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Spending();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'Number');
            }
            if (data.hasOwnProperty('money')) {
                obj['money'] = Money.constructFromObject(data['money']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('lastServerUpdatedAt')) {
                obj['lastServerUpdatedAt'] = ApiClient.convertToType(data['lastServerUpdatedAt'], 'Date');
            }
            if (data.hasOwnProperty('budgetId')) {
                obj['budgetId'] = ApiClient.convertToType(data['budgetId'], 'Number');
            }
            if (data.hasOwnProperty('deletedAt')) {
                obj['deletedAt'] = ApiClient.convertToType(data['deletedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Spending</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Spending</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Spending.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `money`
        if (data['money']) { // data not null
          Money.validateJSON(data['money']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

Spending.RequiredProperties = ["id", "date", "sort", "money", "description", "createdAt", "updatedAt"];

/**
 * @member {String} id
 */
Spending.prototype['id'] = undefined;

/**
 * @member {Date} date
 */
Spending.prototype['date'] = undefined;

/**
 * @member {Number} sort
 */
Spending.prototype['sort'] = undefined;

/**
 * @member {module:model/Money} money
 */
Spending.prototype['money'] = undefined;

/**
 * @member {String} description
 */
Spending.prototype['description'] = undefined;

/**
 * @member {Date} createdAt
 */
Spending.prototype['createdAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
Spending.prototype['updatedAt'] = undefined;

/**
 * для проверки того, что запись не была изменена кем-то еще
 * @member {Date} lastServerUpdatedAt
 */
Spending.prototype['lastServerUpdatedAt'] = undefined;

/**
 * принадлежность к бюджету (указывается при изменении)
 * @member {Number} budgetId
 */
Spending.prototype['budgetId'] = undefined;

/**
 * для операции удаления
 * @member {Date} deletedAt
 */
Spending.prototype['deletedAt'] = undefined;






export default Spending;

