/**
 * Budget API
 * api для записей трат по бюджетам
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ilya_dt@proton.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The Budget model module.
 * @module model/Budget
 * @version 1.0.0
 */
class Budget {
    /**
     * Constructs a new <code>Budget</code>.
     * @alias module:model/Budget
     * @param id {Number} 
     * @param alias {String} Для отображения внизу под вкладками
     * @param name {String} полное название бюджета
     * @param money {module:model/Money} 
     * @param dateFrom {Date} 
     * @param dateTo {Date} 
     */
    constructor(id, alias, name, money, dateFrom, dateTo) { 
        
        Budget.initialize(this, id, alias, name, money, dateFrom, dateTo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, alias, name, money, dateFrom, dateTo) { 
        obj['id'] = id;
        obj['alias'] = alias;
        obj['name'] = name;
        obj['money'] = money;
        obj['dateFrom'] = dateFrom;
        obj['dateTo'] = dateTo;
    }

    /**
     * Constructs a <code>Budget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Budget} obj Optional instance to populate.
     * @return {module:model/Budget} The populated <code>Budget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Budget();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('money')) {
                obj['money'] = Money.constructFromObject(data['money']);
            }
            if (data.hasOwnProperty('dateFrom')) {
                obj['dateFrom'] = ApiClient.convertToType(data['dateFrom'], 'Date');
            }
            if (data.hasOwnProperty('dateTo')) {
                obj['dateTo'] = ApiClient.convertToType(data['dateTo'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Budget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Budget</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Budget.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `money`
        if (data['money']) { // data not null
          Money.validateJSON(data['money']);
        }

        return true;
    }


}

Budget.RequiredProperties = ["id", "alias", "name", "money", "dateFrom", "dateTo"];

/**
 * @member {Number} id
 */
Budget.prototype['id'] = undefined;

/**
 * Для отображения внизу под вкладками
 * @member {String} alias
 */
Budget.prototype['alias'] = undefined;

/**
 * полное название бюджета
 * @member {String} name
 */
Budget.prototype['name'] = undefined;

/**
 * @member {module:model/Money} money
 */
Budget.prototype['money'] = undefined;

/**
 * @member {Date} dateFrom
 */
Budget.prototype['dateFrom'] = undefined;

/**
 * @member {Date} dateTo
 */
Budget.prototype['dateTo'] = undefined;






export default Budget;

